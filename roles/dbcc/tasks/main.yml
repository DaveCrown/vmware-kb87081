---

- name: get dbcc_service state
  shell: "grep -i jndilookup {{ jar_file }} | wc -l"
  register: dbcc_output
  changed_when: false

- name: set check_varible
  set_fact:
    dbcc_service_vulnerable: "{{ dbcc_output.stdout | int }}"
  changed_when: false

- name: check for backup file
  stat:
    path: "{{ jar_file }}.bak"
  register: dbcc_backup_stat
  changed_when: false

- name: chuck a rod if already ran
  assert:
    that: dbcc_backup_stat.stat.exists == false
    fail_msg: "Backup exists, and the jar file is vulnerable"
    success_msg: "No previous backup"
  when: (dbcc_output.stdout | int) !=  0

- name: backup jar file
  copy:
    src: "{{ jar_file }}"
    dest: "{{ jar_file }}.bak"
    remote_src: yes
  when:
    - dbcc_service_vulnerable !=0
    - dbcc_backup_stat.stat.exists == false

- name: Apply Fix
  command: zip -q -d {{ jar_file }} org/apache/logging/log4j/core/lookup/JndiLookup.class
  when: (dbcc_output.stdout | int) !=  0

- name: get dbcc_service state
  shell: "grep -i jndilookup {{ jar_file }}  | wc -l"
  register: dbcc_output
  changed_when: false
  when:  dbcc_service_vulnerable !=0

- name: validate its fixed
  assert:
    that: (dbcc_output.stdout | int) ==  0
    fail_msg: "fix did not work"
    success_msg: "Fix applied successfully"
  when:  dbcc_service_vulnerable !=0
