---
- name: get vmon_service state
  shell: "ps aux | grep formatMsgNoLookups"
  register: vmon_output
  changed_when: false

- name: set check_varible
  set_fact:
    vmon_service_fixed: "{{  vmon_output.stdout is search ('-Dlog4j2.formatMsgNoLookups=true') }}"
  #when:  vmon_output.stdout is search ("-Dlog4j2.formatMsgNoLookups=true")
  changed_when: false
  
- name: check for backup file
  stat:
    path: "{{ base_file }}.bak"
  register: vmon_backup_stat
  changed_when: false

- name: chuck a rod if already ran
  assert:
    that: vmon_backup_stat.stat.exists == false
    fail_msg: "Backup exists, and the wrapper file is vulnerable"
    success_msg: "No previous backup"
  when: not vmon_service_fixed

- name: backup wrapper file
  copy:
    src: "{{ base_file }}"
    dest: "{{ base_file }}.bak"
    remote_src: yes
  when:
    - not vmon_service_fixed
    - vmon_backup_stat.stat.exists == false
  
- name: update launch parameters for jvm
  replace:
    path: "{{ base_file }}"
    regexp: 'exec \$java_start_bin \$jvm_dynargs "\$@"'
    replace: |
      log4j_arg="-Dlog4j2.formatMsgNoLookups=true"
      exec $java_start_bin $jvm_dynargs $log4j_arg "$@" 
  notify: 
    - stop_services
    - start_services
  when:
    - not vmon_service_fixed
    - vmon_backup_stat.stat.exists == false

- name: kick the services over
  meta: flush_handlers

- name: get vmon_service state
  shell: "ps aux | grep formatMsgNoLookups"
  register: vmon_output
  changed_when: false
  when: not vmon_service_fixed

- name: validate its fixed
  assert:
    that: vmon_output.stdout is search ('-Dlog4j2.formatMsgNoLookups=true') 
    fail_msg: "fix did not work"
    success_msg: "Fix applied successfully"
  when: not vmon_service_fixed
